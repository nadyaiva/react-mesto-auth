{"ast":null,"code":"class ApiClass {\n  constructor(config) {\n    this._authorization = config.authorization;\n    this._cohort = config.cohort;\n    this._baseurl = config.baseurl;\n  }\n\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getUserInfoApi() {\n    return fetch(`${this._baseurl}${this._cohort}/users/me`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._handleResponse);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseurl}${this._cohort}/cards`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._handleResponse);\n  }\n\n  updateUserInfo(nameInputValue, titleInputValue) {\n    return fetch(`${this._baseurl}${this._cohort}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._authorization,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: nameInputValue,\n        about: titleInputValue\n      })\n    }).then(this._handleResponse);\n  }\n\n  addNewCard(cardInputData) {\n    return fetch(`${this._baseurl}${this._cohort}/cards`, {\n      method: \"POST\",\n      headers: {\n        authorization: this._authorization,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: cardInputData.cardname,\n        link: cardInputData.link\n      })\n    }).then(this._handleResponse);\n  }\n\n  changeCardLikeStatus(cardId, isLiked) {\n    return fetch(`${this._baseurl}${this._cohort}/cards/${cardId}/likes`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._handleResponse);\n  }\n\n  deletePost(cardId) {\n    return fetch(`${this._baseurl}${this._cohort}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._handleResponse);\n  }\n\n  updateAvatar(urlImage) {\n    return fetch(`${this._baseurl}${this._cohort}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._authorization,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        avatar: urlImage\n      })\n    }).then(this._handleResponse);\n  }\n\n}\n\nconst Api = new ApiClass({\n  authorization: \"d94e7cf1-3761-45b6-9798-0ad1da8f2858\",\n  cohort: \"cohort-42\",\n  baseurl: \"https://nomoreparties.co/v1/\"\n});\nexport default Api;","map":{"version":3,"names":["ApiClass","constructor","config","_authorization","authorization","_cohort","cohort","_baseurl","baseurl","_handleResponse","res","ok","json","Promise","reject","status","getUserInfoApi","fetch","headers","then","getInitialCards","updateUserInfo","nameInputValue","titleInputValue","method","body","JSON","stringify","name","about","addNewCard","cardInputData","cardname","link","changeCardLikeStatus","cardId","isLiked","deletePost","updateAvatar","urlImage","avatar","Api"],"sources":["/Users/nadyaivanova/dev/mesto-react/src/utils/Api.js"],"sourcesContent":["class ApiClass {\n  constructor(config) {\n    this._authorization = config.authorization;\n    this._cohort = config.cohort;\n    this._baseurl = config.baseurl;\n  }\n\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getUserInfoApi() {\n    return fetch(`${this._baseurl}${this._cohort}/users/me`, {\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then(this._handleResponse);\n  }\n  getInitialCards() {\n    return fetch(`${this._baseurl}${this._cohort}/cards`, {\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then(this._handleResponse);\n  }\n  updateUserInfo(nameInputValue, titleInputValue) {\n    return fetch(`${this._baseurl}${this._cohort}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._authorization,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: nameInputValue,\n        about: titleInputValue,\n      }),\n    }).then(this._handleResponse);\n  }\n  addNewCard(cardInputData) {\n    return fetch(`${this._baseurl}${this._cohort}/cards`, {\n      method: \"POST\",\n      headers: {\n        authorization: this._authorization,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: cardInputData.cardname,\n        link: cardInputData.link,\n      }),\n    }).then(this._handleResponse);\n  }\n\n  changeCardLikeStatus(cardId, isLiked) {\n    return fetch(`${this._baseurl}${this._cohort}/cards/${cardId}/likes`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then(this._handleResponse);\n  }\n\n  deletePost(cardId) {\n    return fetch(`${this._baseurl}${this._cohort}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then(this._handleResponse);\n  }\n  updateAvatar(urlImage) {\n    return fetch(`${this._baseurl}${this._cohort}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._authorization,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        avatar: urlImage,\n      }),\n    }).then(this._handleResponse);\n  }\n}\n\nconst Api = new ApiClass({\n  authorization: \"d94e7cf1-3761-45b6-9798-0ad1da8f2858\",\n  cohort: \"cohort-42\",\n  baseurl: \"https://nomoreparties.co/v1/\",\n});\n\nexport default Api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}